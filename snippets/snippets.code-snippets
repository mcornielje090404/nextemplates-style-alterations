{
  // NPC = Next Page Component
  "üßô‚Äç‚ôÇÔ∏è Next Page Component üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "npc",
    "body": [
      "import React from 'react';",
      "",
      "const ${1:Name}Page: React.FC = () => {",
      "  $2", // Placeholder for component logic
      "  return (",
      "    <div>",
      "      ${3:content}", // Placeholder for the main content of the component
      "    </div>",
      "  );",
      "}",
      "",
      "export default ${1:Name}Page;"
    ],
    "description": "Generates a Next.js page component with an editable name."
  },

  // NPCP = Next Page Component with Props
  "üßô‚Äç‚ôÇÔ∏è Next Page Component with Props üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "npcp",
    "body": [
      "import React from 'react';",
      "",
      "type ${1:Name}PageProps = {",
      "  $2", // Placeholder for properties in the props type
      "};",
      "",
      "const ${1:Name}Page: React.FC<${1:Name}PageProps> = ({",
      "  $3", // Placeholder for destructuring props in the function parameter
      "}) => {",
      "  $4", // Placeholder for component logic
      "  return (",
      "    <div>",
      "      ${5:content}", // Placeholder for the main content of the component
      "    </div>",
      "  );",
      "}",
      "",
      "export default ${1:name}Page;"
    ],
    "description": "Generates a Next.js page component with props type and an editable name."
  },

  // NPCPP = Next Page Component with Props and Params
  "üßô‚Äç‚ôÇÔ∏è Next Page Component with Props and Params üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "npcpp",
    "body": [
      "import React from 'react';",
      "",
      "type ${1:Name}Props = {",
      "  params: {",
      "    ${2:paramName}: string;", // User can replace 'paramName' with actual parameter name
      "  }",
      "};",
      "",
      "const ${1:Name}Page: React.FC<${1:Name}Props> = ({",
      "  params", // Since params are a standard prop, it's always passed
      "}) => {",
      "  const { ${2:paramName} } = params;", // This destructures the provided param
      "  // Add component logic here...",
      "  return (",
      "    <div>",
      "      $3", // Placeholder for the main content of the component
      "    </div>",
      "  );",
      "}",
      "",
      "export default ${1:Name}Page;"
    ],
    "description": "Generates a Next.js page component with props and params type and an editable name."
  },

  // NCC = Next Client Component
  "üßô‚Äç‚ôÇÔ∏è Next Client Component üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "ncc",
    "body": [
      "\"use client\"",
      "",
      "export const ${TM_FILENAME_BASE} = () => {",
      "  $1",
      "  return <div>${TM_FILENAME_BASE}$2</div>;",
      "}"
    ],
    "description": "Generates a Next.js client-side functional component based on file name."
  },

  // NCCP = Next Client Component with Props
  "üßô‚Äç‚ôÇÔ∏è Next Client Component with Props üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "nccp",
    "body": [
      "\"use client\"",
      "import React from 'react';",
      "",
      "type ${TM_FILENAME_BASE}Props = {",
      "  $1",
      "};",
      "",
      "export const ${TM_FILENAME_BASE}: React.FC<${TM_FILENAME_BASE}Props> = ({ $2 }) => {",
      "  $3",
      "  return <div>${TM_FILENAME_BASE}$4</div>;",
      "}"
    ],
    "description": "Generates a Next.js TypeScript client-side functional component based on the file name."
  },

  // NSC = Next Server Component
  "üßô‚Äç‚ôÇÔ∏è Next Server Component üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "nsc",
    "body": [
      "export const ${TM_FILENAME_BASE} = () => {",
      "  $1",
      "  return <div>${TM_FILENAME_BASE}$2</div>;",
      "}"
    ],
    "description": "Generates a Next.js server-side functional component based on the fileName."
  },

  // NSCP = Next Server Component with Props
  "üßô‚Äç‚ôÇÔ∏è Next Server Component with Props üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "nscp",
    "body": [
      "import React from 'react';",
      "",
      "type ${TM_FILENAME_BASE}Props = {",
      "  $1",
      "};",
      "",
      "export const ${TM_FILENAME_BASE}: React.FC<${TM_FILENAME_BASE}Props> = ({ $2 }) => {",
      "  $3",
      "  return <div>${TM_FILENAME_BASE}$4</div>;",
      "}"
    ],
    "description": "Generates a Next.js TypeScript server-side functional component based on the file name."
  },

  // NASC
  "üßô‚Äç‚ôÇÔ∏è Next Async Server Component üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "nasc",
    "body": [
      "export const ${TM_FILENAME_BASE} = async () => {",
      "  $1",
      "  return <div>${TM_FILENAME_BASE}$2</div>;",
      "}"
    ],
    "description": "Generates a Next.js async server-side functional component based on the file name."
  },

  // NASCP = Next Async Server Component with Props
  "üßô‚Äç‚ôÇÔ∏è Next Async Server Component with Props üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "nascp",
    "body": [
      "import React from 'react';",
      "",
      "type ${TM_FILENAME_BASE}Props = {",
      "  $1",
      "};",
      "",
      "export const ${TM_FILENAME_BASE}: React.FC<${TM_FILENAME_BASE}Props> = async ({ $2 }) => {",
      "  $3",
      "  return <div>${TM_FILENAME_BASE}$4</div>;",
      "}"
    ],
    "description": "Generates a Next.js TypeScript async server-side functional component based on the file name."
  },

  // NLC = Next Loading Component
  "üßô‚Äç‚ôÇÔ∏è Next Loading Component üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "nlc",
    "body": [
      "const Loading = () => {",
      "  $1",
      "  return (",
      "    <div>",
      "      $2",
      "    </div>",
      "  );",
      "}",
      "",
      "export default Loading;"
    ],
    "description": "Generates a Next.js Loading component based on next docs."
  },

  // NLCP = Next Layout Component with Props
  "üßô‚Äç‚ôÇÔ∏è Next Layout Component üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "nlcp",
    "body": [
      "import type React from 'react';",
      "",
      "type LayoutProps = {",
      "  children: React.ReactNode;",
      "};",
      "",
      "const Layout: React.FC<LayoutProps> = ({ children }) => {",
      "  $1",
      "  return (",
      "    <section>",
      "      {children}",
      "    </section>",
      "  );",
      "}",
      "",
      "export default Layout;"
    ],
    "description": "Generates a Next.js Layout component based on next docs."
  },

  // NMW = Next Middleware
  "üßô‚Äç‚ôÇÔ∏è Next Middleware üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "nmw",
    "body": [
      "import { NextResponse } from 'next/server';",
      "import type { NextRequest } from 'next/server';",
      "",
      "export const middleware = (request: NextRequest) => {",
      "  return NextResponse.redirect(new URL('/', request.url));",
      "}",
      "",
      "export const config = {",
      "  matcher: '$1',",
      "};"
    ],
    "description": "Generates a Next.js middleware with matcher configuration."
  },

  // NSMD = Next Static Metadata
  "üßô‚Äç‚ôÇÔ∏è Next Static Metadata üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "nsmd",
    "body": [
      "import type { Metadata } from 'next';",
      "",
      "export const metadata: Metadata = {",
      "  title: '$1',",
      "};"
    ],
    "description": "Generates a Next.js static metadata function."
  },

  // NGMD = Next Generated Metadata
  "üßô‚Äç‚ôÇÔ∏è Next Generated Metadata üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "ngmd",
    "body": [
      "import type { Metadata } from 'next';",
      "",
      "type GenerateMetadataProps = {",
      "  params: {",
      "    $1: string",
      "  }",
      "};",
      "",
      "export const generateMetadata = (",
      "  { params }: GenerateMetadataProps",
      "): Metadata => {",
      "  const $1 = params.$1;",
      "",
      "  return {",
      "    title: $1,",
      "  };",
      "}"
    ],
    "description": "Generates a Next.js Metadata function using route params."
  },

  // NEC = Next Error Component
  "üßô‚Äç‚ôÇÔ∏è Next Error Component üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "nec",
    "body": [
      "'use client';",
      "",
      "import React, { useEffect } from 'react';",
      "",
      "type ErrorProps = {",
      "  error: Error & { digest?: string };",
      "  reset: () => void;",
      "};",
      "",
      "const Error: React.FC<ErrorProps> = ({ error, reset }) => {",
      "  useEffect(() => {",
      "    console.error(error);",
      "  }, [error]);",
      "",
      "  $1",
      "",
      "  return (",
      "    <div>",
      "      <h2>{error.message}</h2>",
      "      <button onClick={reset}>Try again</button>",
      "    </div>",
      "  );",
      "}",
      "",
      "export default Error;"
    ],
    "description": "Generates a simplified Next.js client error component with `error` and `reset` props."
  },

  // NGEC = Next Global Error Component
  "üßô‚Äç‚ôÇÔ∏è Next Global Error Component üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "ngec",
    "body": [
      "'use client';",
      "",
      "import React, { useEffect } from 'react';",
      "",
      "type GlobalErrorProps = {",
      "  error: Error & { digest?: string };",
      "  reset: () => void;",
      "};",
      "",
      "const GlobalError: React.FC<GlobalErrorProps> = ({ error, reset }) => {",
      "  useEffect(() => {",
      "    console.error(error);",
      "  }, [error]);",
      "",
      "  $1",
      "",
      "  return (",
      "    <div>",
      "      <h2>{error.message}</h2>",
      "      <button onClick={reset}>Try again</button>",
      "    </div>",
      "  );",
      "}",
      "",
      "export default GlobalError;"
    ],
    "description": "Generates a simplified Next.js global error component with `error` and `reset` props."
  },

  // NNF = Next Not Found Component
  "üßô‚Äç‚ôÇÔ∏è Next Not Found Component üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "nnfc",
    "body": [
      "import Link from 'next/link';",
      "",
      "const NotFound = () => {",
      "  $1",
      "",
      "  return (",
      "    <div>",
      "      <h2>Not Found</h2>",
      "      <p>Could not find requested resource</p>",
      "      <Link href=\"/\">Return Home</Link>",
      "    </div>",
      "  );",
      "}",
      "",
      "export default NotFound;"
    ],
    "description": "Generates a simplified Next.js 'Not Found' component."
  },

  // NSAF = Next Async Server Action Function
  "üßô‚Äç‚ôÇÔ∏è Next Async Server Action Function üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "nsaf",
    "body": ["const $1 = async () => {", "  'use server';", "  $2", "}", ""],
    "description": "Generates a Next.js async server-side action function"
  },

  // NASAC = Next Async Server Action Component
  "üßô‚Äç‚ôÇÔ∏è Next Async Server Action Component üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "nasac",
    "body": [
      "'use server';",
      "",
      "export const ${TM_FILENAME_BASE} = () => {",
      "  $1",
      "  return <div>${TM_FILENAME_BASE}$2</div>;",
      "}"
    ],
    "description": "Generates a Next.js async server-side action component based on the file name."
  },

  //! ROUTE HANDLERS
  // NGETR = Next Get Route
  "üßô‚Äç‚ôÇÔ∏è Next Get Route üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "ngetr",
    "body": [
      "import { type NextRequest, NextResponse } from 'next/server';",
      "",
      "export const GET = async (request: NextRequest) => {",
      "  $1",
      "  return new NextResponse('OK', { status: 200 });",
      "}"
    ],
    "description": "Generates a Next.js GET route function."
  },

  // NHEADR = Next Head Route
  "üßô‚Äç‚ôÇÔ∏è Next Head Route üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "nheadr",
    "body": [
      "import { type NextRequest, NextResponse } from 'next/server';",
      "",
      "export const HEAD = async (request: NextRequest) => {",
      "  $1",
      "  return new NextResponse('OK', { status: 200 });",
      "}"
    ],
    "description": "Generates a Next.js HEAD route function."
  },

  // NPOSTR = Next Post Route
  "üßô‚Äç‚ôÇÔ∏è Next Post Route üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "npostr",
    "body": [
      "import { type NextRequest, NextResponse } from 'next/server';",
      "",
      "export const POST = async (request: NextRequest) => {",
      "  $1",
      "  return new NextResponse('OK', { status: 200 });",
      "}"
    ],
    "description": "Generates a Next.js POST route function."
  },

  // NPUTR = Next Put Route
  "üßô‚Äç‚ôÇÔ∏è Next Put Route üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "nputr",
    "body": [
      "import { type NextRequest, NextResponse } from 'next/server';",
      "",
      "export const PUT = async (request: NextRequest) => {",
      "  $1",
      "  return new NextResponse('OK', { status: 200 });",
      "}"
    ],
    "description": "Generates a Next.js PUT route function."
  },

  // NDELETER = Next Delete Route
  "üßô‚Äç‚ôÇÔ∏è Next Delete Route üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "ndeleter",
    "body": [
      "import { type NextRequest, NextResponse } from 'next/server';",
      "",
      "export const DELETE = (request: NextRequest) => {",
      "  $1",
      "  return new NextResponse('OK', { status: 200 });",
      "}"
    ],
    "description": "Generates a Next.js DELETE route function."
  },

  // NPATCHR = Next Patch Route
  "üßô‚Äç‚ôÇÔ∏è Next Patch Route üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "npatchr",
    "body": [
      "import { type NextRequest, NextResponse } from 'next/server';",
      "",
      "export const PATCH = async (request: NextRequest) => {",
      "  $1",
      "  return new NextResponse('OK', { status: 200 });",
      "}"
    ],
    "description": "Generates a Next.js PATCH route function."
  },

  // NOPTIONSR = Next Options Route
  "üßô‚Äç‚ôÇÔ∏è Next Options Route üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "noptionsr",
    "body": [
      "import { type NextRequest, NextResponse } from 'next/server';",
      "",
      "export const OPTIONS = async (request: NextRequest) => {",
      "  $1",
      "  return new NextResponse('OK', { status: 200 });",
      "}"
    ],
    "description": "Generates a Next.js OPTIONS route function."
  },

  //   template.js
  // NTC = Next Template Component
  "üßô‚Äç‚ôÇÔ∏è Next Template Component üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "ntc",
    "body": [
      "import React from 'react';",
      "",
      "type TemplateProps = {",
      "  children: React.ReactNode;",
      "};",
      "",
      "const Template: React.FC<TemplateProps> = ({ children }) => {",
      "  return <div>{children}</div>",
      "}",
      "",
      "export default Template;"
    ],
    "description": "Generates a Next.js template.ts component."
  },

  // NRF = Next Robots File
  "üßô‚Äç‚ôÇÔ∏è Next Robots File üßô‚Äç‚ôÇÔ∏è": {
    "prefix": "nrf",
    "body": [
      "import { MetadataRoute } from 'next'",
      "",
      "const robots = (): MetadataRoute.Robots  => {",
      "  return {",
      "    rules: {",
      "      userAgent: '*',",
      "      allow: '/',",
      "      disallow: '/private/',",
      "    },",
      "    sitemap: 'https://acme.com/sitemap.xml',",
      "  }",
      "}",
      "",
      "export default robots;"
    ],
    "description": "Generates a Next.js robots.ts file."
  }
}
